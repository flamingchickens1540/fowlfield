// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Match_State {
  not_started
  in_progress
  ended
  posted
}

enum Match_Type {
  qualification
  elimination
}

type Match_ElimInfo {
  round         Int
  group         Int
  instance      Int
  red_alliance  Int
  blue_alliance Int
}

enum Card {
  none
  yellow
  red
}

model Match {
  id          String          @id @map("_id")
  stage_index Int
  type        Match_Type
  elim_info   Match_ElimInfo?
  startTime   Int?
  state       Match_State
  red1        Int
  red2        Int
  red3        Int
  blue1       Int
  blue2       Int
  blue3       Int
  scores      Match_Results

  @@unique([stage_index, type])
}

type Totes {
  tote1  Tote
  tote2  Tote
  tote3  Tote
  tote4  Tote
  tote5  Tote
  tote6  Tote
  tote7  Tote
  tote8  Tote
  tote9  Tote
  tote10 Tote
  tote11 Tote
  tote12 Tote
}

type Tote {
  red_balloons  Int // The number of red balloons in the tote
  blue_balloons Int // The number of blue balloons in the tote
  bunnies       Int // The number of bunnies in the tote at the end of auto
}

type Match_Results {
  red          Match_AllianceResults
  blue         Match_AllianceResults
  totes        Totes
  fouls        Foul[]
  corral_empty Boolean
}

type Match_AllianceResults {
  card_robot1   Card // The card for the first robot on the alliance
  card_robot2   Card // The card for the second robot on the alliance
  card_robot3   Card // The card for the third robot on the alliance
  zone_bunnies  Int // The number of bunnies in the alliance's low zone at the end of the match
  zone_balloons Int // The number of balloons in the alliance's low zone at the end of the match
}

type Foul {
  isAgainstRed Boolean // Whether the foul is against the red alliance
  timestamp    DateTime // The time the foul was committed
  team_number  Int // The team that committed the foul
  foul_points  Int // The number of points the foul is worth
}

model Team {
  id             Int     @id @map("_id")
  team_name      String?
  robot_name     String?
  display_number String  @unique
  has_card       Boolean @default(false)
}

model PlayoffAlliance {
  seed        Int  @id @map("_id")
  captain     Int?
  first_pick  Int?
  second_pick Int?
  third_pick  Int?
}
